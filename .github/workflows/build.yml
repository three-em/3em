name: rust / build

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Awarnings

jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true

          - os: ubuntu-latest
            target: aarch64-linux-android
            cross: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false

          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          default: true
          override: true

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Setup Cross Compilation Tools
        if: matrix.cross == 'true' && contains(matrix.target, 'linux')
        run: |
          sudo apt update

          sudo apt install -yq --no-install-suggests --no-install-recommends \
            binfmt-support g++-10-aarch64-linux-gnu g++-10-multilib \
            gcc-10-aarch64-linux-gnu libc6-arm64-cross qemu qemu-user \
            qemu-user-binfmt

          sudo ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc-10" >> $GITHUB_ENV
          echo "QEMU_LD_PREFIX=/usr/aarch64-linux-gnu" >> $GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --color always --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Get Build Name
        id: zip
        run: echo "::set-output name=name::three_em-${{ matrix.target }}-${{ github.ref == 'refs/heads/main' && 'canary' || 'dev' }}-$(git rev-parse --short HEAD)"

      - name: Upload ${{ github.ref == 'refs/heads/main' && 'Canary' || 'Dev' }} Builds
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.zip.outputs.name }}
          path: |
            README.md
            LICENSE
            target/${{ matrix.target }}/release/three_em
            target/${{ matrix.target }}/release/three_em.exe
          if-no-files-found: error
          retention-days: 7

      # Benchmarks

      - name: Benchmark
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        working-directory: tools/benchmarks
        env:
          BUILDS: target/${{ matrix.target }}/release
        run: |
          wget https://github.com/sharkdp/hyperfine/releases/download/v1.12.0/hyperfine_1.12.0_amd64.deb --quiet
          sudo dpkg -i hyperfine_1.12.0_amd64.deb > /dev/null
          rm hyperfine_1.12.0_amd64.deb > /dev/null

          pip install matplotlib numpy six --upgrade --quiet --quiet
          yarn install --silent

          ./benchmark.sh
          ./mean.py results.json
          ./times.py results.json

      - name: Post Benchmark
        if: matrix.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: benchmark
          path: tools/benchmarks/results.md
