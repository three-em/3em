name: ship

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release: # set to true to trigger a release
        description: Trigger a release
        required: false
        default: 'false'
      tag: # example: x.y.z-rc.w
        description: Release tag
        required: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    outputs:
      commit: ${{ steps.commit.outputs.hash }}

    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false

          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          default: true

      - name: Setup Cross Compilation Tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update

          sudo apt install -yq --no-install-suggests --no-install-recommends \
            binfmt-support g++-10-aarch64-linux-gnu g++-10-multilib \
            gcc-10-aarch64-linux-gnu libc6-arm64-cross qemu qemu-user \
            qemu-user-binfmt

          sudo ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc-10" >> $GITHUB_ENV
          echo "QEMU_LD_PREFIX=/usr/aarch64-linux-gnu" >> $GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --color always --release --locked --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Zip unix release
        if: runner.os != 'windows'
        working-directory: target/${{ matrix.target }}/release
        run: zip -r three_em-${{ matrix.target }}.zip three_em

      - name: Zip windows release
        if: runner.os == 'windows'
        working-directory: target/${{ matrix.target }}/release
        run: Compress-Archive -CompressionLevel Optimal -Force -Path three_em.exe -DestinationPath three_em-${{ matrix.target }}.zip

      - name: Upload Release Builds
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: target/${{ matrix.target }}/release/*.zip
          if-no-files-found: error
          retention-days: 1

  publish:
    if: github.event.inputs.release == 'true' && github.event.inputs.tag != ''
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Download Builds
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.tag }}
          name: v${{ github.event.inputs.tag }}
          prerelease: contains(github.event.inputs.tag, '-')
          discussionCategory: 'announcements'
          draft: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: 'artifacts/release/*.zip'
          generateReleaseNotes: true
          token: ${{ github.token }}
